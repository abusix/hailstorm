{"version":3,"file":"table-unvirtualized-6468c009.js","sources":["../../src/components/table-unvirtualized/table-body/table-body-row/table-body-row.tsx","../../src/components/table-unvirtualized/table-body/table-body-cell/table-body-cell.tsx","../../src/components/table-unvirtualized/table-body/table-body-placeholder/table-body-placeholder.tsx","../../src/components/table-unvirtualized/table-body/table-body-loading-indicator/table-body-loading-indicator.tsx","../../src/components/table-unvirtualized/table-body/table-body.tsx","../../src/components/table-unvirtualized/table-header/table-header-cell/table-header-cell.tsx","../../src/components/table-unvirtualized/table-header/table-header-row/table-header-row.tsx","../../src/components/table-unvirtualized/table-header/table-header.tsx","../../src/components/table-unvirtualized/table-unvirtualized.tsx"],"sourcesContent":["import React, { forwardRef, HTMLProps, ReactNode } from \"react\";\nimport { classNames } from \"../../../../util/class-names\";\n\nexport interface RowProps extends HTMLProps<HTMLTableRowElement> {\n    children: ReactNode;\n    className?: string;\n    isExpanded?: boolean;\n}\n\nconst TableBodyRow = forwardRef<HTMLTableRowElement, RowProps>(\n    ({ children, className, isExpanded, style }, ref) => {\n        return (\n            <tr\n                className={classNames(\n                    className,\n                    isExpanded ? \"bg-primary-50\" : \"border-b border-b-neutral-300\",\n                    \"last:border-none\"\n                )}\n                ref={ref}\n                style={style}\n            >\n                {children}\n            </tr>\n        );\n    }\n);\n\nexport { TableBodyRow };\n","import React, { CSSProperties, forwardRef, ReactNode } from \"react\";\nimport { classNames } from \"../../../../util/class-names\";\n\nexport interface CellProps {\n    // cells can be children-less (for e.g. placeholder columns)\n    children?: ReactNode;\n    style?: CSSProperties;\n    colSpan?: number;\n    className?: string;\n    align?: CellAlignment;\n    isTextContent?: boolean;\n}\n\ntype CellAlignment = \"left\" | \"center\" | \"right\";\n\nconst cellAlignStyles: Record<CellAlignment, string> = {\n    left: \"\",\n    center: \"flex justify-center items-center\",\n    right: \"flex justify-end items-end\",\n};\n\nconst TableBodyCell = forwardRef<HTMLTableCellElement, CellProps>(\n    ({ children, align = \"left\", isTextContent = true, className, colSpan, style }, ref) => {\n        return (\n            <td\n                className={classNames(\"h-16 pr-6 first:pl-6\", className)}\n                ref={ref}\n                style={style}\n                colSpan={colSpan}\n            >\n                {isTextContent ? (\n                    <div className={classNames(\"paragraph-100\", cellAlignStyles[align])}>\n                        {children}\n                    </div>\n                ) : (\n                    children\n                )}\n            </td>\n        );\n    }\n);\n\nexport { TableBodyCell };\n","import React from \"react\";\nimport { TableBodyCell } from \"../table-body-cell/table-body-cell\";\nimport { TableBodyRow } from \"../table-body-row/table-body-row\";\n\nexport interface EmptyPlaceholderProps {\n    title: string;\n    description: string;\n    colSpan: number;\n    children?: React.ReactNode;\n}\n\nexport const TableEmptyPlaceholder = ({\n    title,\n    description,\n    colSpan,\n    children,\n}: EmptyPlaceholderProps) => {\n    return (\n        <TableBodyRow aria-label=\"No data available in this table\">\n            <TableBodyCell colSpan={colSpan} className=\"h-80\">\n                <div className=\"min-h-96 max-w-96 flex flex-col items-center justify-center\">\n                    <h5 className=\"headline-300 mb-1\">{title}</h5>\n\n                    <p className=\"paragraph-100 mb-2\">{description}</p>\n\n                    {children}\n                </div>\n            </TableBodyCell>\n        </TableBodyRow>\n    );\n};\n","import React from \"react\";\nimport { Spinner } from \"../../../spinner/spinner\";\nimport { TableBodyRow } from \"../table-body-row/table-body-row\";\nimport { TableBodyCell } from \"../table-body-cell/table-body-cell\";\n\nexport interface TableBodyLoadingIndicatorProps {\n    colSpan: number;\n}\n\nexport const TableBodyLoadingIndicator = ({ colSpan }: TableBodyLoadingIndicatorProps) => {\n    return (\n        <TableBodyRow>\n            <TableBodyCell className=\"h-80 text-center\" colSpan={colSpan}>\n                <div className=\"flex items-center justify-center\">\n                    <Spinner />\n                </div>\n            </TableBodyCell>\n        </TableBodyRow>\n    );\n};\n","import React from \"react\";\nimport { TableBodyRow } from \"./table-body-row/table-body-row\";\nimport { TableBodyCell } from \"./table-body-cell/table-body-cell\";\nimport { TableEmptyPlaceholder } from \"./table-body-placeholder/table-body-placeholder\";\nimport { TableBodyLoadingIndicator } from \"./table-body-loading-indicator/table-body-loading-indicator\";\n\nexport interface TableBodyProps {\n    children: React.ReactNode;\n}\n\nconst TableBody = ({ children }: TableBodyProps) => {\n    return <tbody className=\"bg-neutral-0\">{children}</tbody>;\n};\n\nTableBody.LoadingIndicator = TableBodyLoadingIndicator;\nTableBody.EmptyPlaceholder = TableEmptyPlaceholder;\nTableBody.Row = TableBodyRow;\nTableBody.Cell = TableBodyCell;\n\nexport { TableBody };\n","import React, { CSSProperties, ReactNode } from \"react\";\nimport { classNames } from \"../../../../util/class-names\";\n\ntype TableCellAlign = \"left\" | \"center\" | \"right\";\n\nexport interface TableHeaderCellProps {\n    children: ReactNode;\n    align?: TableCellAlign;\n    className?: string;\n    colSpan?: number;\n    style?: CSSProperties;\n}\n\nconst cellAlign: Record<TableCellAlign, string> = {\n    left: \"text-left\",\n    center: \"text-center\",\n    right: \"text-right\",\n};\n\nexport const TableHeaderCell = ({\n    children,\n    align = \"left\",\n    colSpan,\n    style,\n    className,\n}: TableHeaderCellProps) => {\n    return (\n        <th\n            scope=\"col\"\n            colSpan={colSpan}\n            style={style}\n            className={classNames(\n                `headline-100 bg-neutral-50 py-4 pr-6 uppercase text-neutral-700 first:pl-6`,\n                cellAlign[align],\n                className\n            )}\n        >\n            {children}\n        </th>\n    );\n};\n","import React, { ReactNode } from \"react\";\n\nexport interface TableHeaderRowProps {\n    children: ReactNode;\n}\n\nexport const TableHeaderRow = ({ children }: TableHeaderRowProps) => {\n    return <tr>{children}</tr>;\n};\n","import React, { ForwardedRef, forwardRef, ReactNode } from \"react\";\nimport { TableHeaderCell } from \"./table-header-cell/table-header-cell\";\nimport { TableHeaderRow } from \"./table-header-row/table-header-row\";\nimport { classNames } from \"../../../util/class-names\";\n\nexport interface TableHeaderProps {\n    children: ReactNode;\n}\n\nconst TableHeader = forwardRef(\n    ({ children }: TableHeaderProps, ref: ForwardedRef<HTMLTableSectionElement>) => {\n        return (\n            <thead\n                ref={ref}\n                className={classNames(\n                    \"bg-abusix-neutral-100 sticky top-0 overflow-hidden rounded-lg\",\n                    \"after:absolute after:bottom-0 after:left-0 after:h-px after:w-full after:bg-neutral-300\"\n                )}\n            >\n                {children}\n            </thead>\n        );\n    }\n);\n\nTableHeader.displayName = \"TableHeader\";\n\nconst TableHeaderNamespace = Object.assign(TableHeader, {\n    Cell: TableHeaderCell,\n    Row: TableHeaderRow,\n});\n\nexport { TableHeaderNamespace as TableHeader };\n","import React from \"react\";\nimport { TableBody } from \"./table-body/table-body\";\nimport { TableHeader } from \"./table-header/table-header\";\nimport { classNames } from \"../../util/class-names\";\n\ninterface TableUnvirtualizedProps {\n    children: React.ReactNode;\n    height?: number;\n    isContainerBordersShown?: boolean;\n    hasFixedTableLayout?: boolean;\n}\n\nconst TableUnvirtualized = ({\n    children,\n    height,\n    isContainerBordersShown = true,\n    hasFixedTableLayout,\n}: TableUnvirtualizedProps) => {\n    return (\n        <div\n            className={classNames(\n                \"rounded-lg bg-neutral-0\",\n                isContainerBordersShown && \"overflow-y-auto rounded-lg border border-neutral-300\"\n            )}\n            style={{ height }}\n        >\n            <table className={classNames(hasFixedTableLayout && \"table-fixed\", \"w-full text-sm\")}>\n                {children}\n            </table>\n        </div>\n    );\n};\n\nTableUnvirtualized.Body = TableBody;\nTableUnvirtualized.Header = TableHeader;\n\nexport { TableUnvirtualized };\n"],"names":["TableBodyRow","forwardRef","children","className","isExpanded","style","ref","jsx","classNames","cellAlignStyles","TableBodyCell","align","isTextContent","colSpan","TableEmptyPlaceholder","title","description","jsxs","TableBodyLoadingIndicator","Spinner","TableBody","cellAlign","TableHeaderCell","TableHeaderRow","TableHeader","TableHeaderNamespace","TableUnvirtualized","height","isContainerBordersShown","hasFixedTableLayout"],"mappings":"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"}