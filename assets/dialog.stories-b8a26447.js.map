{"version":3,"file":"dialog.stories-b8a26447.js","sources":["../../src/components/dialog/dialog.tsx"],"sourcesContent":["import { Dialog as HeadlessDialog, Transition } from \"@headlessui/react\";\nimport React, { Fragment } from \"react\";\nimport { Button } from \"../button/button\";\nimport { IconButton } from \"../icon-button/icon-button\";\nimport { classNames } from \"../../util/class-names\";\nimport { CrossIcon, TickIcon } from \"../../icons\";\n\nexport interface DialogProps {\n    isShown?: boolean;\n    title?: string;\n    onClose?: (submitted: boolean) => void;\n    isCloseable?: boolean;\n    height?: number;\n    width?: number;\n    className?: string;\n    children: React.ReactNode;\n    footer?: React.ReactNode | null;\n    footerPosition?: \"end\" | \"start\";\n    hasBackground?: boolean;\n    position?: \"center\" | \"bottom-right\";\n}\n\nexport const Dialog = ({\n    isShown,\n    children,\n    className,\n    isCloseable = true,\n    footer,\n    footerPosition = \"end\",\n    onClose,\n    height,\n    width,\n    title,\n    hasBackground = true,\n    position = \"center\",\n}: DialogProps): JSX.Element | null => {\n    const handleClose = (submitted = false) => {\n        if (!isCloseable) {\n            return;\n        }\n\n        if (onClose) {\n            onClose(submitted);\n        }\n    };\n\n    return (\n        <Transition show={isShown} as={Fragment}>\n            <HeadlessDialog as=\"div\" onClose={handleClose}>\n                {hasBackground ? (\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-out duration-300\"\n                        enterFrom=\"opacity-0\"\n                        enterTo=\"opacity-100\"\n                        leave=\"ease-in duration-200\"\n                        leaveFrom=\"opacity-100\"\n                        leaveTo=\"opacity-0\"\n                    >\n                        <div\n                            className=\"fixed inset-0 bg-modal-background\"\n                            aria-hidden=\"true\"\n                            onClick={() => handleClose(true)}\n                        />\n                    </Transition.Child>\n                ) : null}\n\n                <div\n                    className={classNames(\n                        `fixed inset-0 flex overflow-y-auto p-8`,\n                        position === \"bottom-right\" && \"items-end justify-end\",\n                        position === \"center\" && \"items-center justify-center\"\n                    )}\n                >\n                    <Transition.Child\n                        as={Fragment}\n                        enter=\"ease-out duration-300\"\n                        enterFrom=\"opacity-0 translate-y-4\"\n                        enterTo=\"opacity-100 translate-y-0\"\n                        leave=\"ease-in duration-200\"\n                        leaveFrom=\"opacity-100 translate-y-0\"\n                        leaveTo=\"opacity-0 translate-y-4\"\n                    >\n                        <HeadlessDialog.Panel\n                            className={classNames(\n                                \"flex transform flex-col overflow-y-auto rounded-md bg-neutral-0 shadow-lg transition-all\",\n                                height ? `h-[${height}px]` : \"max-h-full\",\n                                width ? `w-[${width}px]` : \"w-[592px]\",\n                                className\n                            )}\n                        >\n                            <div className=\"relative mx-10 mt-10\">\n                                <HeadlessDialog.Title className=\"mb-6 pr-12 text-lg font-semibold text-neutral-900\">\n                                    {title}\n                                </HeadlessDialog.Title>\n\n                                {isCloseable && (\n                                    <IconButton\n                                        className=\"absolute right-0 top-0\"\n                                        Icon={CrossIcon}\n                                        type=\"minimal\"\n                                        onClick={() => handleClose(false)}\n                                    />\n                                )}\n                                <HeadlessDialog.Description as=\"div\">\n                                    {children}\n                                </HeadlessDialog.Description>\n                            </div>\n\n                            <div\n                                id=\"dialog-footer\"\n                                className={classNames(\n                                    \"sticky bottom-0 left-0 flex flex-row gap-2 bg-neutral-0 px-10 pb-8 pt-8\",\n                                    footerPosition === \"end\" ? \"justify-end\" : \"justify-start\"\n                                )}\n                            >\n                                {footer === undefined ? (\n                                    <>\n                                        <Button\n                                            type=\"secondary\"\n                                            onClick={() => handleClose(false)}\n                                            disabled={!isCloseable}\n                                        >\n                                            Cancel\n                                        </Button>\n\n                                        <Button\n                                            type=\"primary\"\n                                            LeftIcon={TickIcon}\n                                            onClick={() => handleClose(true)}\n                                            disabled={isCloseable}\n                                        >\n                                            Confirm\n                                        </Button>\n                                    </>\n                                ) : (\n                                    footer\n                                )}\n                            </div>\n                        </HeadlessDialog.Panel>\n                    </Transition.Child>\n                </div>\n            </HeadlessDialog>\n        </Transition>\n    );\n};\n"],"names":["Dialog","isShown","children","className","isCloseable","footer","footerPosition","onClose","height","width","title","hasBackground","position","handleClose","submitted","jsx","Transition","Fragment2","jsxs","HeadlessDialog","classNames","IconButton","CrossIcon","Fragment","Button","TickIcon"],"mappings":"quBAsBO,MAAAA,EAAA,CAAA,CAAgB,QAAAC,EACnB,SAAAC,EACA,UAAAC,EACA,YAAAC,EAAA,GACc,OAAAC,EACd,eAAAC,EAAA,MACiB,QAAAC,EACjB,OAAAC,EACA,MAAAC,EACA,MAAAC,EACA,cAAAC,EAAA,GACgB,SAAAC,EAAA,QAEpB,IAAA,CACI,MAAAC,EAAA,CAAAC,EAAA,KAAA,CACIV,GAIAG,GACIA,EAAAO,CAAA,CACJ,EAGJ,OAAAC,EAAAA,IAAAC,EAAA,CAAA,KAAAf,EAAA,GAAAgB,WAAA,SAAAC,EAAAA,KAAAC,EAAA,CAAA,GAAA,MAAA,QAAAN,EAAA,SAAA,CAGaF,EAAAI,EAAA,IACGC,EAAA,MAAY,CAAX,GAAAC,EAAA,SACO,MAAA,wBACE,UAAA,YACI,QAAA,cACF,MAAA,uBACF,UAAA,cACI,QAAA,YACF,SAAAF,EAAA,IAER,MAAC,CAAA,UAAA,oCACa,cAAA,OACE,QAAA,IAAAF,EAAA,EAAA,CACmB,CAAA,CACnC,CAAA,EAAA,KAEJE,EAAA,IAEJ,MAAC,CAAA,UAAAK,EACc,yCACPR,IAAA,gBAAA,wBAC+BA,IAAA,UAAA,6BACN,EAC7B,SAAAG,EAAA,IAEAC,EAAA,MAAY,CAAX,GAAAC,EAAA,SACO,MAAA,wBACE,UAAA,0BACI,QAAA,4BACF,MAAA,uBACF,UAAA,4BACI,QAAA,0BACF,SAAAC,EAAA,KAERC,EAAA,MAAgB,CAAf,UAAAC,EACc,2FACPZ,EAAA,MAAAA,CAAA,MAAA,aAC6BC,EAAA,MAAAA,CAAA,MAAA,YACFN,CAC3B,EACJ,SAAA,CAEAe,EAAAA,KAAA,MAAA,CAAA,UAAA,uBAAA,SAAA,CACIH,EAAA,IAAAI,EAAA,MAAA,CAAA,UAAA,oDAAA,SAAAT,EAAA,EAEAN,GAAAW,EAAA,IAGIM,EAAC,CAAA,UAAA,yBACa,KAAAC,EACJ,KAAA,UACD,QAAA,IAAAT,EAAA,EAAA,CAC2B,CAAA,EACpCE,EAAA,IAAAI,EAAA,YAAA,CAAA,GAAA,MAAA,SAAAjB,EAAA,CAIJ,EAAA,EACJa,EAAA,IAEA,MAAC,CAAA,GAAA,gBACM,UAAAK,EACQ,0EACPd,IAAA,MAAA,cAAA,eAC2C,EAC/C,SAAAD,IAAA,OAAAa,EAAAA,KAAAK,EAAAA,SAAA,CAAA,SAAA,CAIQR,EAAA,IAAAS,EAAC,CAAA,KAAA,YACQ,QAAA,IAAAX,EAAA,EAAA,EAC2B,SAAA,CAAAT,EACrB,SAAA,QACd,CAAA,EAEDW,EAAA,IAEAS,EAAC,CAAA,KAAA,UACQ,SAAAC,EACK,QAAA,IAAAZ,EAAA,EAAA,EACqB,SAAAT,EACrB,SAAA,SACb,CAAA,CAED,CAAA,CAAA,EAAAC,CAGJ,CAAA,CAER,CAAA,CAAA,CACJ,CAAA,CACJ,CAAA,CACJ,CAAA,CAAA,CAAA,CAAA,CAIhB"}